
# How to Recreate the PowerShell Threat Hunt Scenario

This guide walks through the steps required to replicate the Suspicious PowerShell Activity threat hunt scenario described in the report.

---

## üß∞ Prerequisites

- A Windows 10 Virtual Machine (local or in Azure)
- PowerShell 5.1 or higher
- Local admin rights on the VM
- Internet access
- (Optional) Microsoft Defender for Endpoint or Sentinel for KQL telemetry review

---

## üõ†Ô∏è Step-by-Step Scenario Creation

### Step 1: Create the PowerShell Script

1. Open **Notepad**.
2. Paste the following line:
    ```powershell
    Start-Process "calc.exe"
    ```
3. Save the file:
    - File name: `open_calc.ps1`
    - Save as type: `All Files`
    - Location: `C:\Users\<YourUsername>\Downloads`

---

### Step 2: Execute the Script with PowerShell

1. Open PowerShell as Administrator.
2. Run the script:
    ```powershell
    powershell -ExecutionPolicy Bypass -File "C:\Users\<YourUsername>\Downloads\open_calc.ps1"
    ```

---

### Step 3: Encode and Execute the Command Obfuscated

1. In PowerShell:
    ```powershell
    $command = 'Start-Process "calc.exe"'
    $bytes = [System.Text.Encoding]::Unicode.GetBytes($command)
    $encoded = [Convert]::ToBase64String($bytes)
    ```
2. Use the encoded output in this command:
    ```powershell
    powershell -NoProfile -ExecutionPolicy Bypass -EncodedCommand <Base64Output>
    ```

---

### Step 4: Simulate Network Activity

1. Run the following command to simulate outbound traffic:
    ```powershell
    Invoke-WebRequest -Uri "https://example.com" -UseBasicParsing
    ```

---

## üîé Detection Using KQL (Optional in MDE/Sentinel)

### Detect Script File Creation

```kusto
DeviceFileEvents
| where FileName endswith ".ps1"
| where FolderPath has_any("Downloads", "Desktop", "Temp", "Public")
```

### Detect PowerShell Script Execution

```kusto
DeviceProcessEvents
| where FileName =~ "powershell.exe"
| where ProcessCommandLine has ".ps1"
```

### Detect Encoded PowerShell Usage

```kusto
DeviceProcessEvents
| where FileName =~ "powershell.exe"
| where ProcessCommandLine contains "-EncodedCommand"
```

### Detect PowerShell-Initiated Network Connections

```kusto
DeviceNetworkEvents
| where InitiatingProcessFileName =~ "powershell.exe"
```

---

## ‚úÖ Scenario Complete

This will safely simulate a PowerShell-based attack pattern for threat hunting practice or detection validation. No malicious actions are performed.
