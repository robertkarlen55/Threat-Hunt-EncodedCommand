
# Recreate the Suspicious PowerShell Threat Hunt Scenario

These step-by-step instructions will help you replicate the PowerShell threat hunt scenario detailed in the "Threat Hunt Report: Suspicious PowerShell Activity."

---

## ‚öôÔ∏è Requirements

- Windows 10 Virtual Machine (local or cloud, e.g., Azure)
- PowerShell 5.1 or later
- Internet connection (for simulated web request)
- Admin privileges on the VM
- Microsoft Defender for Endpoint (optional, for telemetry collection)
- Access to run Kusto Query Language (KQL) queries in Defender or Sentinel

---

## üîß Step-by-Step Instructions

### 1. Open Notepad and Create the PowerShell Script

1. Open Notepad.
2. Paste this content:
    ```powershell
    Start-Process "calc.exe"
    ```
3. Save the file with:
   - **File name:** `open_calc.ps1`
   - **Save as type:** `All Files`
   - **Location:** `C:\Users\<YourUsername>\Downloads`

---

### 2. Execute the Script via PowerShell

1. Open PowerShell **as Administrator**.
2. Run the following:
    ```powershell
    powershell -ExecutionPolicy Bypass -File "C:\Users\<YourUsername>\Downloads\open_calc.ps1"
    ```

---

### 3. Encode the Command and Run It Obfuscated

1. In PowerShell, run:
    ```powershell
    $command = 'Start-Process "calc.exe"'
    $bytes = [System.Text.Encoding]::Unicode.GetBytes($command)
    $encoded = [Convert]::ToBase64String($bytes)
    ```
2. Copy the Base64 string output.
3. Run the encoded command:
    ```powershell
    powershell -NoProfile -ExecutionPolicy Bypass -EncodedCommand <your_base64_string>
    ```

---

### 4. Generate Simulated Network Activity

Run this harmless command to simulate external network behavior:
```powershell
Invoke-WebRequest -Uri "https://example.com" -UseBasicParsing
```

---

## üîç Optional: Verify with Defender for Endpoint (MDE)

Use the following KQL queries in the **Microsoft 365 Defender Portal** or **Microsoft Sentinel**:

### Find Script File Creation
```kusto
DeviceFileEvents
| where FileName endswith ".ps1"
| where FolderPath has_any("Downloads", "Desktop", "Temp", "Public")
```

### Find PowerShell Script Execution
```kusto
DeviceProcessEvents
| where FileName =~ "powershell.exe"
| where ProcessCommandLine has ".ps1"
```

### Find EncodedCommand Execution
```kusto
DeviceProcessEvents
| where FileName =~ "powershell.exe"
| where ProcessCommandLine contains "-EncodedCommand"
```

### Find Network Events from PowerShell
```kusto
DeviceNetworkEvents
| where InitiatingProcessFileName =~ "powershell.exe"
```

---

## ‚úÖ That's it!

You've now successfully recreated the scenario and generated valid logs for detection testing or analyst training.
